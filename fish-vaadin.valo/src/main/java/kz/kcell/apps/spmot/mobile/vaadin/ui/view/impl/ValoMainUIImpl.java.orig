package kz.kcell.apps.spmot.mobile.vaadin.ui.view.impl;

import com.vaadin.annotations.Theme;
import com.vaadin.annotations.Title;
import com.vaadin.annotations.Widgetset;
import com.vaadin.data.Property;
import com.vaadin.navigator.Navigator;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener;
import com.vaadin.server.*;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.*;
import com.vaadin.ui.themes.ValoTheme;
import kz.kcell.apps.common.msisdn.FastMsisdn;
import kz.kcell.apps.common.msisdn.Msisdn;
import kz.kcell.apps.spmot.mobile.vaadin.controller.SessionManager;
import kz.kcell.apps.spmot.mobile.vaadin.data.Account;
import kz.kcell.apps.spmot.mobile.vaadin.ui.*;
import kz.kcell.apps.spmot.mobile.vaadin.ui.view.*;
import kz.kcell.vaadin.ui.Style;
import lombok.Getter;
import lombok.Setter;
import lombok.extern.log4j.Log4j;
import lombok.extern.slf4j.Slf4j;

import static kz.kcell.apps.spmot.mobile.vaadin.SpmotResourceBundle.*;

import java.util.Iterator;
import java.util.LinkedHashMap;
import java.util.Map;

/**
 * @author Pavel.Terechshenkov@kcell.kz
 * @since 27 10 2014
 */
//@Theme("tests-valo")
@Theme("tsr")
@Title("Sales Point Motivation")
@Widgetset("kz.kcell.apps.spmot.mobile.vaadin.ui.AppWidgetSet")
@Slf4j
public class ValoMainUIImpl extends MainUI {

    @Getter @Setter
    private FastMsisdn msisdn = new FastMsisdn("77777777777");
    private Double bonus = null;
    private boolean themeSelectShowEnable = false;
    private boolean testMode = false;
    private boolean settingsShowEnable = false;
    private boolean developMode = false;
    private Label title;
    private Label msisdnLabel = new Label();
    @Getter
    private View currentView;

    private Button main_menu_button_product       ;
    private Button main_menu_button_subscribe_log ;
    private Button main_menu_button_transfer_bonus;
    private Button main_menu_button_bonus_info    ;
    private Button main_menu_button_change_lang   ;
    private Button main_menu_button_out           ;
    private Button main_menu_button_login         ;
    private Button main_menu_button_bonus         ;

    public static enum State {
          login
        , logout
        , log, services
        , transfer
        , bonuses_info
        , subscribeForm
        , productDesc
        , subscribeIvr
        , change_lang
        , my_balance
        ;
    }

    @Setter
    private TransferBonusesView transferBonusesView;

    @Setter
    private BonusesInfoView bonusesInfoView;

    @Setter
    private ProductNavigatorView productNavigatorView;

    @Setter
    private SubscribeLogView subscribeLogView;

    @Setter
    private LoginView loginView;

    @Setter
    private LogoutView logoutView;

    @Setter
    private ErrorView errorView;

    @Setter
    private SubscribeFormView subscribeFormView;

    @Setter
    private ProductDescView productDescView;

    @Setter
    private SubscribeIvrView subscribeIvrView;

    @Setter
    private LangSwitcherView langSwitcherView;

    @Setter
    private kz.kcell.apps.spmot.mobile.vaadin.ui.ErrorHandler errorHandler;

    @Getter /*@Setter*/
    private Listener listener;

    private static LinkedHashMap<String, String> themeVariants = new LinkedHashMap<String, String>();

    static {
        themeVariants.put("tests-valo", "Default");
        themeVariants.put("tests-valo-blueprint", "Blueprint");
        themeVariants.put("tests-valo-dark", "Dark");
        themeVariants.put("tests-valo-facebook", "Facebook");
        themeVariants.put("tests-valo-flatdark", "Flat dark");
        themeVariants.put("tests-valo-flat", "Flat");
        themeVariants.put("tests-valo-light", "Light");
        themeVariants.put("tests-valo-metro", "Metro");
        themeVariants.put("tsr", "Telesonera");
        themeVariants.put("dashboard", "Dashboard");
        themeVariants.put("tsr-ru", "RU");
        themeVariants.put("tsr-kx", "KZ");
    }
    private final TestIcon testIcon = new TestIcon(100);
    ValoMenuLayout root = new ValoMenuLayout();
//    VerticalLayout root_fs = new VerticalLayout();

    ComponentContainer viewDisplay = root.getContentContainer();
    CssLayout menu = new CssLayout();
    CssLayout menuItemsLayout = new CssLayout();
    {
        menu.setId("testMenu");
    }
    private Navigator navigator;
    private final LinkedHashMap<String, Button> menuItems = new LinkedHashMap<String, Button>();

    @Override
    protected void init(final VaadinRequest request) {
        UI.getCurrent().getSession().setErrorHandler(errorHandler);
        SessionManager.initRequestHandler();
        initConstatnt(request);
        processTestMode();
        Responsive.makeResponsive(this);
        hackForIE9();
        initFerstState();
    }

    private void processTestMode() {
        if(testMode) {
            Show_v_app_loading_valo_menu_badge();

            if (browserCantRenderFontsConsistently()) {
                getPage().getStyles().add(
                        ".v-app.v-app.v-app {font-family: Sans-Serif;}");
            }
        }
    }

    private void initConstatnt(VaadinRequest request) {
        testMode = request.getParameter("test") != null;
        themeSelectShowEnable =request.getParameter("themeselect") != null;
        settingsShowEnable =request.getParameter("settings") != null;
    }

    private void hackForIE9() {
        if (getPage().getWebBrowser().isIE()
                && getPage().getWebBrowser().getBrowserMajorVersion() == 9) {
            menu.setWidth("320px");
        }
    }

    private void initFerstState() {
        String f = Page.getCurrent().getUriFragment();
        if(getSession().getAttribute(Account.class) == null) {
            //navigator.navigateTo(State.login.name());
            f = "";
        }
        if (f == null || f.equals("")) {
            navigator.navigateTo(State.login.name());
        }
    }

    private void setFullScreen() {
        if(developMode) return;
        root.hideMainMenu();
    }

    private void offFullScreen() {
        root.showMainMenu();
    }

    public void init() {
        getPage().setTitle(page_title.$());
        setContent(root);
        root.setWidth(Style._100p);

        root.addMenu(buildMenu());

        navigator = new Navigator(this, viewDisplay);

        navigator.addView(State.transfer.name(),      (View) transferBonusesView);
        navigator.addView(State.bonuses_info.name(),  (View) bonusesInfoView);
        navigator.addView(State.services.name(),      (View) productNavigatorView);
        navigator.addView(State.log.name(),           (View) subscribeLogView);
        navigator.addView(State.login.name(),         (View) loginView);
        navigator.addView(State.logout.name(),        (View) logoutView);
        navigator.addView(State.subscribeForm.name(), (View) subscribeFormView);
        navigator.addView(State.productDesc.name(),   (View) productDescView);
        navigator.addView(State.subscribeIvr.name(),  (View) subscribeIvrView);
        navigator.addView(State.change_lang.name(),   (View) langSwitcherView);
        navigator.setErrorView(                       (View) errorView);

        navigator.addViewChangeListener(new ViewChangeListener() {

            @Override
            public boolean beforeViewChange(final ViewChangeEvent event) {
                log.debug("-- BEFORE ENTER {}",event.getViewName());
                log.debug("{}",SessionManager.info());
                if(listener != null) {
                    return listener.beforeViewChange(event);
                }

                State state = State.valueOf(event.getViewName());
                if(SessionManager.isAuthorized() == false && state != ValoMainUIImpl.State.login) {
                     navigator.navigateTo(ValoMainUIImpl.State.login.name());
                     return false;
                } else if(SessionManager.isAuthorized() == true && state == ValoMainUIImpl.State.login ){
                    navigator.navigateTo(ValoMainUIImpl.State.logout.name());
                    return false;
                }
                refreshMsisdnAndBonusLabel();
                return true;


/*
                if(state != State.login) {
                    navigator.navigateTo(State.login.name());
                } else {
                    return true;
                }
                return false;
*/
            }

            @Override
            public void afterViewChange(final ViewChangeEvent event) {
                log.debug("-- AFTER ENTER {}",event.getViewName());
                log.debug(" {}",SessionManager.info());
                if(listener != null) {
                    if(listener.afterViewChange(event) == false) {
                        return;
                    }
                }

                currentView = event.getNewView();
                if(event.getViewName().equals(State.login.name())) {
                    setFullScreen();
                } else {
                    offFullScreen();
                }

                // for all menu item remove selected style
                menuItemsLayout.forEach(p -> p.removeStyleName("selected"));

                for (final Map.Entry<String, Button> item : menuItems.entrySet()) {
                    if (event.getViewName().equals(item.getKey())) {
                        for (final Iterator<Component> it = menuItemsLayout.iterator(); it.hasNext();) {
                            final Component c = it.next();
                            if (c.getCaption() != null && c.getCaption().startsWith(item.getValue().getCaption())) {
                                c.addStyleName("selected");
                                break;
                            }
                        }
                        break;
                    }
                }
                menu.removeStyleName("valo-menu-visible");
            }
        });

    }

    @Override
    public void translate() {
        main_menu_button_product        .setCaption(main_menu_product.$());
        main_menu_button_subscribe_log  .setCaption(main_menu_subscribe_log.$());
        main_menu_button_transfer_bonus .setCaption(main_menu_transfer_bonus.$());
        main_menu_button_change_lang    .setCaption(main_menu_change_lang.$());
        main_menu_button_out            .setCaption(main_menu_out.$());

        updateTitle();
    }

    private void Show_v_app_loading_valo_menu_badge() {
        try {
            Thread.sleep(2000);
        } catch (InterruptedException e) {}
    }

    private boolean browserCantRenderFontsConsistently() {
        // PhantomJS renders font correctly about 50% of the time, so
        // disable it to have consistent screenshots
        // https://github.com/ariya/phantomjs/issues/10592

        // IE8 also has randomness in its font rendering...

        return getPage().getWebBrowser().getBrowserApplication()
                .contains("PhantomJS")
                || (getPage().getWebBrowser().isIE() && getPage()
                .getWebBrowser().getBrowserMajorVersion() <= 9);
    }

    private CssLayout buildMenu() {
        // Add items
        main_menu_button_product        = new Button(main_menu_product        .$(), e-> {navigator.navigateTo(State.services.name()   );});
        main_menu_button_subscribe_log  = new Button(main_menu_subscribe_log  .$(), e-> {navigator.navigateTo(State.log.name()        );});
        main_menu_button_transfer_bonus = new Button(main_menu_transfer_bonus .$(), e-> {navigator.navigateTo(State.transfer.name()   );});
        main_menu_button_bonus_info     = new Button(main_menu_bonus_info     .$(), e-> {navigator.navigateTo(State.bonuses_info.name());});
        main_menu_button_change_lang    = new Button(main_menu_change_lang    .$(), e-> {navigator.navigateTo(State.change_lang.name());});
        main_menu_button_out            = new Button(main_menu_out            .$(), e-> {navigator.navigateTo(State.logout.name()     );});
//        main_menu_button_login          = new Button("Вход"                       , e-> {navigator.navigateTo(State.login.name()      );});
//        main_menu_button_bonus          = new Button("Мои бонусы"                 , e-> {navigator.navigateTo(State.my_balance.name() );});

        main_menu_button_product        .setId(main_menu_product        .name());
        main_menu_button_subscribe_log  .setId(main_menu_subscribe_log.name());
        main_menu_button_transfer_bonus .setId(main_menu_transfer_bonus.name());
        main_menu_button_bonus_info     .setId(main_menu_bonus_info.name());
        main_menu_button_change_lang    .setId(main_menu_change_lang    .name());
        main_menu_button_out            .setId(main_menu_out            .name());

        menuItems.put(State.services.name()   ,  main_menu_button_product       );
        menuItems.put(State.log.name()        ,  main_menu_button_subscribe_log );
        menuItems.put(State.bonuses_info.name(),  main_menu_button_bonus_info    );
        menuItems.put(State.transfer.name()   ,  main_menu_button_transfer_bonus);
        menuItems.put(State.change_lang.name(),  main_menu_button_change_lang   );
        menuItems.put(State.logout.name()     ,  main_menu_button_out           );
//        menuItems.put(State.logout.name()     ,  main_menu_button_bonus         );
        if(developMode) {
            menuItems.put(State.login.name(), main_menu_button_login);
        }

        final HorizontalLayout top = new HorizontalLayout();
        top.setWidth("100%");
        top.setDefaultComponentAlignment(Alignment.MIDDLE_LEFT);
        top.addStyleName("valo-menu-title");
        menu.addComponent(top);
        if(isThemeSelectEnable()) {
            menu.addComponent(createThemeSelect());
        }

        final Button showMenu = new Button("Menu", new Button.ClickListener() {
            @Override
            public void buttonClick(final Button.ClickEvent event) {
                if (menu.getStyleName().contains("valo-menu-visible")) {
                    menu.removeStyleName("valo-menu-visible");
                } else {
                    menu.addStyleName("valo-menu-visible");
                }
            }
        });
        showMenu.addStyleName(ValoTheme.BUTTON_PRIMARY);
        showMenu.addStyleName(ValoTheme.BUTTON_SMALL);
        showMenu.addStyleName("valo-menu-toggle");
        showMenu.setIcon(FontAwesome.LIST);
        menu.addComponent(showMenu);

        title = new Label(main_title.$(), ContentMode.HTML);
        title.setSizeUndefined();
        top.addComponent(title);
        top.setExpandRatio(title, 1);


        if(settingsShowEnable) {
            menu.addComponent(createSettingsMenu());
        }
//        menu.addComponent(msisdnLabel);
        menuItemsLayout.setPrimaryStyleName("valo-menuitems");
        menu.addComponent(menuItemsLayout);

        Label label = null;
        int count = -1;

        msisdnLabel.setContentMode(ContentMode.HTML);
        msisdnLabel.setPrimaryStyleName("valo-menu-subtitle");
        msisdnLabel.addStyleName("h4");
        msisdnLabel.setSizeUndefined();
        menuItemsLayout.addComponent(msisdnLabel);

        for (final Map.Entry<String, Button> item : menuItems.entrySet()) {
/*
            if (item.getKey().equals("labels")) {
                label = new Label("Components", ContentMode.HTML);
                label.setPrimaryStyleName("valo-menu-subtitle");
                label.addStyleName("h4");
                label.setSizeUndefined();
                menuItemsLayout.addComponent(label);
            }
            if (item.getKey().equals("panels")) {
                label.setValue(label.getValue()
                        + " <span class=\"valo-menu-badge\">" + count
                        + "</span>");
                count = 0;
                label = new Label("Containers", ContentMode.HTML);
                label.setPrimaryStyleName("valo-menu-subtitle");
                label.addStyleName("h4");
                label.setSizeUndefined();
                menuItemsLayout.addComponent(label);
            }
            if (item.getKey().equals("forms")) {
                label.setValue(label.getValue()
                        + " <span class=\"valo-menu-badge\">" + count
                        + "</span>");
                count = 0;
                label = new Label("Other", ContentMode.HTML);
                label.setPrimaryStyleName("valo-menu-subtitle");
                label.addStyleName("h4");
                label.setSizeUndefined();
                menuItemsLayout.addComponent(label);
            }
*/

/*
            if (count == -1) {
                b.setCaption(b.getCaption()
                        + " <span class=\"valo-menu-badge\">123</span>");
            }
*/

            item.getValue().setHtmlContentAllowed(true);
            item.getValue().setPrimaryStyleName("valo-menu-item");
//            b.setIcon(testIcon.get());
            menuItemsLayout.addComponent(item.getValue());
            count++;
        }
/*
        if (label != null) {
            label.setValue(String.format("%s <span class=\"valo-menu-badge\">%d</span>", label.getValue(), count));
        }
*/

        return menu;
    }

    private MenuBar createSettingsMenu() {
        final MenuBar settingsMenuBar = new MenuBar();
        settingsMenuBar.addStyleName("user-msenu");

        final MenuBar.MenuItem settingsItem = settingsMenuBar.addItem(getMsisdn().format(Msisdn.Format.COMPACT),
                new ThemeResource("../tests-valo/img/profile-pic-300px.jpg"),
                null);
        settingsItem.addItem("Edit Profile", null);
        settingsItem.addItem("Preferences", null);
        settingsItem.addSeparator();
        settingsItem.addItem("Sign Out", null);
        return settingsMenuBar;
    }

    private boolean isThemeSelectEnable() {
        return themeSelectShowEnable;
    }

    private Component createThemeSelect() {
        final NativeSelect ns = new NativeSelect();
        ns.setNullSelectionAllowed(false);
        ns.setId("themeSelect");
        ns.addContainerProperty("caption", String.class, "");
        ns.setItemCaptionPropertyId("caption");
        for (final String identifier : themeVariants.keySet()) {
            ns.addItem(identifier).getItemProperty("caption")
                    .setValue(themeVariants.get(identifier));
        }

        ns.setValue("tests-valo");
        ns.addValueChangeListener(new Property.ValueChangeListener() {
            @Override
            public void valueChange(final Property.ValueChangeEvent event) {
                setTheme((String) ns.getValue());
            }
        });
        return ns;
    }

    @Override
    public void showNotification(String msg, Notification.Type typeMsg) {
        if(currentView instanceof BaseView) {
            ((BaseView) currentView).showNotification(msg, typeMsg);
        }
    }

/*
    @Override
    public void setBonus(Double bonus) {
        this.bonus = bonus;
        updateTitle();
    }
*/

    @Override
    public void setMsisdn(String msisdnStr) {
        msisdn = new FastMsisdn(msisdnStr);
        msisdnLabel.setValue(msisdn.format(Msisdn.Format.CANONICAL));
        updateTitle();
    }

    private void updateTitle() {

//        String bonusStr = bonus == null ? "--- "+ SpecSymbol.₸: String.format("%10.2f "+SpecSymbol.₸, bonus);
//        String titleStr = String.format("<h3>%s <strong>%s</strong> %s</h3> ", msisdn.getNDC(), msisdn.getSN(), bonusStr);
//        title.setValue(titleStr);

//        String bonusStr = bonus == null ? main_no_bonus_label.$(): main_bonus_label.$(bonus);
//        title.setValue(bonusStr);
    }

    private void refreshMsisdnAndBonusLabel() {
        if(SessionManager.getAccount().getMsisdn() != null) {
            setMsisdn(SessionManager.getAccount().getMsisdn().get());
        }
//        setBonus(SessionManager.getAccount().getBonus());
        updateTitle();
    }
}
